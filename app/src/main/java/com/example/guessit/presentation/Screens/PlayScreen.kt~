package com.example.guessit.presentation.Screens

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Message
import androidx.compose.material.icons.filled.RemoveCircle
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.example.guessit.data.PainterDataClass.Lines
import com.example.guessit.data.PainterDataClass.LiveLine
import com.example.guessit.data.dataClasses.Player
import com.example.guessit.presentation.Navigation.MESSAGESCREEN
import com.example.guessit.presentation.ViewModel.AppViewModel
import kotlinx.coroutines.delay


@Composable
fun PlayScreen(
    navController: NavController,
    viewmodel: AppViewModel = hiltViewModel(),
    roomID: String,
    name:String
) {
    val context = LocalContext.current

    // State for fetching words, players, and real-time lines
    val getWordsFromServerState = viewmodel.getWordFromServerSate.collectAsState()
    val getAllPlayerInRoomState = viewmodel.getAllPlayersFromRoomState.collectAsState()
    val getRealTimeLinesState = viewmodel.getRealtimeLinesState.collectAsState()

    // Local state for drawn lines
    val lines = remember { mutableStateListOf<Lines>() }
    val index = remember { mutableStateOf(0) }
    val colorValue = remember { mutableStateOf(0) }
    
    val colorVariable by remember(colorValue.value) { // âœ… This makes it reactive
        mutableStateOf(
            when (colorValue.value) {
                0 -> Color.Green
                1 -> Color.Red
                2 -> Color.Blue
                3 -> Color.Yellow
                else -> Color.White
            }
        )
    }


    val eraserStrokeWidth: Dp = if (colorValue.value == 4) 50.dp else 10.dp

    LaunchedEffect(Unit) {
        // Fetch words and players initially
        viewmodel.getWordFromServer()
        viewmodel.getAllPlayersFromRoom(roomID = roomID)

        while (true) {
            delay(5000)
            viewmodel.getRealtimeLines(roomID = roomID) // Periodically fetch live lines
        }
    }

    // âœ… Append real-time lines to the local list without removing existing ones
    LaunchedEffect(getRealTimeLinesState.value.data) {
        getRealTimeLinesState.value.data?.let { liveLine ->
            colorValue.value = liveLine.colorvalue
            lines.add(
                Lines(
                    start = Offset(liveLine.startX, liveLine.startY),
                    end = Offset(liveLine.endX, liveLine.endY),
                    strokeWidth = liveLine.strokeWidth.dp,
                    color = colorVariable // Change color as needed
                )
            )
        }
    }

    if (getWordsFromServerState.value.isLoading && getAllPlayerInRoomState.value.isLoading) {
        LoadingBar()
    } else if (getWordsFromServerState.value.data != null && getAllPlayerInRoomState.value.data.isNotEmpty()) {
        val words = getWordsFromServerState.value.data ?: emptyList()

        // Prevent crash if words list is empty
        if (words.isNotEmpty()) {
            index.value = index.value.coerceIn(0, words.size - 1)
        } else {
            index.value = 0
        }

        Column(modifier = Modifier.fillMaxSize()) {

            // ðŸŽ¨ Canvas for Drawing
            Canvas(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .background(color = Color.White)
                    .pointerInput(Unit) {
                        detectDragGestures { change, dragAmount ->
                            change.consume()

                            // Create new line object
                            val newLine = Lines(
                                start = change.position - dragAmount,
                                end = change.position,
                                strokeWidth = eraserStrokeWidth,
                                color = colorVariable
                            )

                            val liveNewLine = LiveLine(
                                startX = change.position.x - dragAmount.x,
                                startY = change.position.y - dragAmount.y,
                                endX = change.position.x,
                                endY = change.position.y,
                                strokeWidth = eraserStrokeWidth.value,
                                colorvalue = colorValue.value
                            )

                            // Add locally
                            lines.add(newLine)

                            // Upload new line to Firebase
                            viewmodel.uploadLiveLinesToRealTimeDatabase(liveNewLine, roomID)
                        }
                    }
            ) {
                // Draw all stored lines (both local & real-time)
                lines.forEach { line ->
                    drawLine(
                        start = line.start,
                        end = line.end,
                        strokeWidth = line.strokeWidth.toPx(),
                        color = line.color
                    )
                }
            }

            // ðŸŽ¨ Color selection buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Button(onClick = { colorValue.value = 1 }, colors = ButtonDefaults.buttonColors(containerColor = Color.Red)
                , modifier = Modifier.weight(1f)) {}
                Button(onClick = { colorValue.value = 2 }, colors = ButtonDefaults.buttonColors(containerColor = Color.Blue)
                    , modifier = Modifier.weight(1f)) {}
                Button(onClick = { colorValue.value = 3 }, colors = ButtonDefaults.buttonColors(containerColor = Color.Yellow)
                    , modifier = Modifier.weight(1f)) {}
                IconButton(onClick = {
                    navController.navigate(MESSAGESCREEN(
                        roomID = roomID, name = name
                    ))
                }, modifier = Modifier.weight(1f)) {
                    Icon(imageVector = Icons.Filled.Message , contentDescription = "message")
                }

                IconButton(onClick = {
                    colorValue.value = 4
                }, modifier = Modifier.weight(1f)) {
                    Icon(imageVector = Icons.Filled.RemoveCircle , contentDescription = "message")
                }
            }
        }
    } else {
        Text("Error Screen")
    }
}
